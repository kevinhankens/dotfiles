diff --git a/options_element.inc b/options_element.inc
index eda288a..2a11903 100644
--- a/options_element.inc
+++ b/options_element.inc
@@ -8,11 +8,10 @@
 
 
 /**
- * Theme an options element.
+ * Pre render an options element
  */
-function theme_options($variables) {
-  $element = $variables['element'];
-
+function pre_render_options($element, $form_state) {
+  // Add classes to the class array.
   $classes = array();
   if (isset($element['#attributes']['class'])) {
     $classes = $element['#attributes']['class'];
@@ -32,41 +31,65 @@ function theme_options($variables) {
   if (isset($element['#multiple']) && $element['#multiple']) {
     $classes[] = 'options-multiple';
   }
+  $element['#attributes']['class'] = $classes;
+
+
+  $element['options'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('Options'),
+    '#collapsible' => FALSE,
+    '#attributes' => array('class' => array('options')),
+  );
+
+  $element['options']['custom_keys'] = $element['options_field'];
+  unset($element['options_field']);
 
-  $options = '';
-  $options .= drupal_render($element['options_field']);
   if (isset($element['default_value_field'])) {
-    $options .= drupal_render($element['default_value_field']);
+    $element['options']['default_value_field'] = $element['default_value_field'];
+    unset($element['default_value_field']);
   }
 
-  $settings = '';
+  $element['settings'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('Option settings'),
+    '#attributes' => array('class' => array('option-settings')),
+  );
+
+  $settings = array();
   if (isset($element['custom_keys'])) {
-    $settings .= drupal_render($element['custom_keys']);
+    $settings['custom_keys'] = $element['custom_keys'];
+    unset($element['custom_keys']);
   }
   if (isset($element['multiple'])) {
-    $settings .= drupal_render($element['multiple']);
+    $settings['multiple'] = $element['multiple'];
+    unset($element['multiple']);
   }
   if (isset($element['option_settings'])) {
-    $settings .= drupal_render($element['option_settings']);
+    $settings['option_settings'] = $element['option_settings'];
+    unset($element['option_settings']);
   }
 
-  $output = '';
-  $output .= '<div class="' . implode(' ', $classes) .'">';
-  $output .= theme('fieldset', array('element' => array(
-    '#title' => t('Options'),
-    '#collapsible' => FALSE,
-    '#children' => $options,
-    '#attributes' => array('class' => array('options')),
-  )));
-
-  if (!empty($settings)) {
-    $output .= theme('fieldset', array('element' => array(
+  if (count($settings) > 0) {
+    $element['settings'] = array(
+      '#type' => 'fieldset',
       '#title' => t('Option settings'),
-      '#collapsible' => FALSE,
-      '#children' => $settings,
       '#attributes' => array('class' => array('option-settings')),
-    )));
+    );
+    $element['settings'] = array_merge($element['settings'], $settings);
   }
+
+  return $element;
+}
+
+/**
+ * Theme an options element.
+ */
+function theme_options($variables) {
+  $element = $variables['element'];
+
+  $output = '';
+  $output .= '<div class="' . implode(' ', $element['#attributes']['class']) .'">';
+  $output .= drupal_render_children($element);
   $output .= '</div>';
 
   return $output;
@@ -157,7 +180,7 @@ function _form_options_expand($element) {
   }
 
   // Add the field for storing default values.
-  if ($element['#default_value'] !== FALSE && !isset($element['default_value_field'])) {
+  if ($element['#manual_default_value_allowed'] && !isset($element['default_value_field'])) {
     $element['default_value_field'] = array(
       '#title' => t('Default value'),
       '#type' => 'textfield',
diff --git a/options_element.module b/options_element.module
index cee8a84..d3ca8cb 100644
--- a/options_element.module
+++ b/options_element.module
@@ -65,6 +65,9 @@
  *   the "none" key type.
  * - key_type_toggled: Determine if the toggle checkbox is set or not by
  *   default.
+ * - manual_default_value_allowed: Indicates whether the end user should be
+ *   able to modify the default value when editing the options list. Defaults
+ *   to TRUE.
  *   @code
  *   $element['options'] = array(
  *     '#type' => 'options',
@@ -87,8 +90,10 @@ function options_element_element_info() {
     '#key_type' => 'mixed',
     '#key_type_toggle' => NULL,
     '#key_type_toggled' => FALSE,
+    '#manual_default_value_allowed' => TRUE,
     '#element_validate' => array('form_options_validate'),
     '#disabled' => FALSE,
+    '#pre_render' => array('pre_render_options'),
   );
 
   return $type;
