diff --git a/views_load_more.js b/views_load_more.js
index 44e1e30..55b952f 100644
--- a/views_load_more.js
+++ b/views_load_more.js
@@ -13,6 +13,7 @@
     // our presets.
     var wrapper = response.selector ? $(response.selector) : $(ajax.wrapper);
     var method = response.method || ajax.method;
+    var targetList = response.targetList || '';
     var effect = ajax.getEffect(response);
 
     // We don't know what response.data contains: it might be a string of text
@@ -41,12 +42,42 @@
     Drupal.detachBehaviors(wrapper, settings);
 
     // Add the new content to the page.
-    wrapper.find('.pager a').remove();
-    wrapper.find('.pager').html(new_content.find('.pager'));
-    wrapper.find('.view-content')[method](new_content.find('.views-row'));
+    var $pager = $('.pager', wrapper),
+        $newPager = $('.pager', new_content);
+    $('a', $pager).remove();
+    $pager.html($newPager);
+    if (targetList) {
+      $('.view-content ' + targetList, wrapper)[method]($('.views-row', new_content));
+    }
+    else {
+      $('.view-content', wrapper)[method]($('.views-row', new_content));
+    }
+    // Renumber and reclass the items
+    $('.views-row', wrapper)
+    .removeClass('views-row-first views-row-last views-row-odd views-row-even')
+    .filter(':first')
+    .addClass('views-row-first')
+    .end()
+    .filter(':last')
+    .addClass('views-row-last')
+    .end()
+    // :even and :odd are zero-based, so even starts at the first (odd) element.
+    .filter(':even')
+    .addClass('views-row-odd')
+    .end()
+    .filter(':odd')
+    .addClass('views-row-even')
+    .end();
+    // @todo Still need to renumber the items so the ordinal views-row classes
+    // are correct.
+
 
     // Attach all JavaScript behaviors to the new content
-    wrapper.removeClass('views-processed');
+    // Remove the Jquery once Class, TODO: There needs to be a better
+    // way of doing this, look at .removeOnce() :-/
+    var classes = wrapper.attr('class');
+    var onceClass = classes.match(/jquery-once-[0-9]*-[a-z]*/);
+    wrapper.removeClass(onceClass[0]);
     var settings = response.settings || ajax.settings || Drupal.settings;
     Drupal.attachBehaviors(wrapper, settings);
 
@@ -72,5 +103,7 @@
         $(view).waypoint(opts);
       });
     }
+    $('li.pager-next > a.active').removeClass('active');
   };
+
 })(jQuery);
diff --git a/views_load_more.module b/views_load_more.module
index 93648c9..095cd31 100644
--- a/views_load_more.module
+++ b/views_load_more.module
@@ -27,8 +27,16 @@ function views_load_more_theme() {
 function views_load_more_views_ajax_data_alter(&$commands, $view) {
   if (is_a($view->query->pager, 'views_plugin_pager_load_more')) {
     foreach ($commands as $key => $command) {
-      // the replace should the only one, but just incase, we'll make sure.
+      // remove "viewsScrollTop" command, as this behavior is unnecessary.
+      if ($command['command'] == 'viewsScrollTop') {
+        unset($commands[$key]);
+      }
+      // the replace should the only one, but just in case, we'll make sure.
       if ($command['command'] == 'insert' && $command['selector'] == '.view-dom-id-' . $view->dom_id) {
+        if ($view->style_plugin->options['type'] =='ul') {
+          $target = '.item-list > ul:not(.links)';
+          $commands[$key]['targetList'] = $target;
+        }
         $commands[$key]['command'] = 'viewsLoadMoreAppend';
         $commands[$key]['method'] = 'append';
       }
@@ -37,17 +45,17 @@ function views_load_more_views_ajax_data_alter(&$commands, $view) {
 }
 
 function theme_views_load_more_pager($vars) {
-  global $pager_page_array, $pager_total;  
+  global $pager_page_array, $pager_total;
 
   drupal_add_js(drupal_get_path('module', 'views_load_more').'/views_load_more.js');
-  
+
   $tags = $vars['tags'];
   $element = $vars['element'];
   $parameters = $vars['parameters'];
 
   $li_next = theme('pager_next',
     array(
-      'text' => (isset($tags[3]) ? $tags[3] : t('Load More')),
+      'text' => (isset($tags[3]) ? $tags[3] : t($vars['more_button_text'])),
       'element' => $element,
       'interval' => 1,
       'parameters' => $parameters,
diff --git a/views_load_more.views.inc b/views_load_more.views.inc
index 023e8a1..9da7a2c 100644
--- a/views_load_more.views.inc
+++ b/views_load_more.views.inc
@@ -12,7 +12,7 @@ function views_load_more_views_plugins() {
     'module' => 'views_load_more',
     'pager' => array(
       'load_more' => array(
-        'title' => t('Load More Pager'),
+        'title' => t('Show more pager (appends next page of results within the same page)'),
         'help' => t('views_load_more'),
         'handler' => 'views_plugin_pager_load_more',
         'uses options' => TRUE,
diff --git a/views_plugin_pager_load_more.inc b/views_plugin_pager_load_more.inc
index 759c035..a7fbf15 100644
--- a/views_plugin_pager_load_more.inc
+++ b/views_plugin_pager_load_more.inc
@@ -8,9 +8,9 @@
 class views_plugin_pager_load_more extends views_plugin_pager_full {
   function summary_title() {
     if (!empty($this->options['offset'])) {
-      return format_plural($this->options['items_per_page'], 'Load more pager, @count item, skip @skip', 'Load more pager, @count items, skip @skip', array('@count' => $this->options['items_per_page'], '@skip' => $this->options['offset']));
+      return format_plural($this->options['items_per_page'], 'Show more pager, @count item, skip @skip', 'Show more pager, @count items, skip @skip', array('@count' => $this->options['items_per_page'], '@skip' => $this->options['offset']));
     }
-      return format_plural($this->options['items_per_page'], 'Load more pager, @count item', 'Load more pager, @count items', array('@count' => $this->options['items_per_page']));
+      return format_plural($this->options['items_per_page'], 'Show more pager, @count item', 'Show more pager, @count items', array('@count' => $this->options['items_per_page']));
   }
 
   function option_definition() {
@@ -20,11 +20,45 @@ class views_plugin_pager_load_more extends views_plugin_pager_full {
         'infinite' => array('default' => FALSE),
       )
     );
+    $options['more_button_text'] = array(
+      'default' => t('Show more'),
+      'translateable' => TRUE,
+    );
     return $options;
   }
 
   function options_form(&$form, &$form_state) {
     parent::options_form($form, $form_state);
+
+    // Provide a notice to users about enabling AJAX for use with this pager
+    $form['load_more_notice'] = array(
+      '#markup' => '<p>'. t('Important: To use \'Show more pager\', select \'Use AJAX: Yes\' in the Advanced section on the Edit view page') . '</p>',
+      '#weight' => -20,
+    );
+
+    // It really doesn't make much sense for this pager to allow an unlimited number
+    // of elements per page. Update description of the items to display field to reflect this
+    $form['items_per_page']['#description'] = t('The number of items to display per page.');
+    $form['items_per_page']['#weight'] = -10;
+
+    // Provide an option for users to specify the text used on the more button.
+    $form['more_button_text_enable'] = array(
+      '#type' => 'checkbox',
+      '#title' => t('Rename \'Show more\' link'),
+      '#weight' => -2,
+    );
+    $form['more_button_text'] = array(
+      '#type' => 'textfield',
+      '#title' => t('Rename \'Show more\' link'),
+      '#title_display' => 'invisible',
+      '#description' => t('The text that will be displayed on the link used to load more elements. For example "Show me more."'),
+      '#default_value' => $this->options['more_button_text'] ? $this->options['more_button_text'] : t('Show more'),
+      '#dependency' => array(
+        'edit-pager-options-more-button-text-enable' => array(1),
+      ),
+      '#weight' => -1,
+    );
+
     if (module_exists('waypoints')) {
       $form['waypoint'] = array(
         '#type' => 'fieldset',
@@ -38,12 +72,20 @@ class views_plugin_pager_load_more extends views_plugin_pager_full {
       $form['waypoint']['infinite'] = array(
         '#type' => 'checkbox',
         '#title' => t('Infinite scrolling'),
-        '#description' => t('Load more content when the user reaches the bottom of the page.'),
+        '#description' => t('Show more content when the user reaches the bottom of the page.'),
         '#default_value' => $this->options['waypoint']['infinite'],
       );
     }
   }
 
+  function options_validate(&$form, &$form_state) {
+    parent::options_validate($form, $form_state);
+    $items_per_page = $form_state['values']['pager_options']['items_per_page'];
+    if($items_per_page == 0){
+      form_set_error('options][items_per_page', t('When using the \'Show more pager\', the number of items per page must be at least 1'));
+    }
+  }
+
   function render($input) {
     if (module_exists('waypoints') && $this->options['waypoint']['infinite'] == 1) {
       $viewsLoadMore = array();
@@ -57,8 +99,13 @@ class views_plugin_pager_load_more extends views_plugin_pager_full {
     }
 
     $pager_theme = views_theme_functions('views_load_more_pager', $this->view, $this->display);
-    return theme($pager_theme, array(
-      'parameters' => $input, 'element' => $this->options['id']));
+
+    $vars = array(
+      'parameters' => $input,
+      'element' => $this->options['id'],
+      'more_button_text' => $this->options['more_button_text'],
+    );
+
+    return theme($pager_theme, $vars);
   }
 }
-
