diff --git a/media_oembed/media_oembed.module b/media_oembed/media_oembed.module
index 93dcd46..68753ad 100644
--- a/media_oembed/media_oembed.module
+++ b/media_oembed/media_oembed.module
@@ -27,7 +27,7 @@ function media_oembed_stream_wrappers() {
 function media_oembed_file_formatter_info() {
   $formatters['media_oembed'] = array(
     'label' => t('oEmbed'),
-    'default settings' => array('width' => '560', 'height' => '340'),
+    'default settings' => array('width' => '560', 'height' => '340', 'wmode' => 'opaque', 'add_source_link' => FALSE),
     'view callback' => 'media_oembed_file_formatter_media_oembed_view',
     'settings callback' => 'media_oembed_file_formatter_media_oembed_settings',
   );
@@ -41,6 +41,30 @@ function media_oembed_file_formatter_info() {
 }
 
 /**
+ * Implements hook_element_info_alter().
+ */
+function media_oembed_element_info_alter(&$types) {
+  $types['oembed_thumbnail']['#pre_render'][] = 'media_oembed_pre_render_thumbnail';
+}
+
+/**
+ * #pre_render callback for 'oembed_thumbnail' elements.
+ *
+ * For oEmbed responses with no thumbnail image, fall back to Media module's
+ * generic icon rather than rendering nothing, so that there's something to
+ * select within the Media browser or WYSIWYG editor.
+ */
+function media_oembed_pre_render_thumbnail($element) {
+  // oembedcore_pre_render_thumbnail() sets #printed to TRUE when there's no
+  // thumbnail to render.
+  if (!empty($element['#printed']) && !isset($element['#path']) && isset($element['#file'])) {
+    $element['#theme'] = 'media_formatter_large_icon';
+    $element['#printed'] = FALSE;
+  }
+  return $element;
+}
+
+/**
  * Implements hook_file_default_displays().
  *
  * Provides default display configurations for media types.
@@ -108,10 +132,16 @@ function media_oembed_file_formatter_media_oembed_view($file, $display, $langcod
     $options = array(
       'width' => isset($file->override['width']) ? $file->override['width'] : $display['settings']['width'],
       'height' => isset($file->override['height']) ? $file->override['height'] : $display['settings']['height'],
+      'wmode' => isset($file->override['wmode']) ? $file->override['wmode'] : $display['settings']['wmode'],
+      'add_source_link' => $display['settings']['add_source_link'],
     );
+    if (empty($options['wmode'])) {
+      unset($options['wmode']);
+    }
 
     // Not a WYSIWYG editor instance.
     if (empty($file->override['wysiwyg'])) {
+      drupal_add_library('media', 'media_embed');
       $element = oembedcore_render_cache('oembed', $url, $options);
     }
 
@@ -142,6 +172,19 @@ function media_oembed_file_formatter_media_oembed_settings($form, &$form_state,
     '#type' => 'textfield',
     '#default_value' => $settings['height'],
   );
+  $element['wmode'] = array(
+    '#title' => t('Flash window mode (wmode)'),
+    '#type' => 'select',
+    '#empty_option' => t('None (do not request a specific wmode from the provider)'),
+    '#options' => drupal_map_assoc(array('window', 'transparent', 'opaque', 'direct', 'gpu')),
+    '#description' => t('Controls layering, transparency, and playback performance of content rendered by the Flash player. For more information, view <a href="http://kb2.adobe.com/cps/127/tn_12701.html#main_Using_Window_Mode__wmode__values_">Adobe\'s documentation</a>.'),
+    '#default_value' => $settings['wmode'],
+  );
+  $element['add_source_link'] = array(
+    '#title' => t('Include a link to the original media source.'),
+    '#type' => 'checkbox',
+    '#default_value' => $settings['add_source_link'],
+  );
   return $element;
 }
 
@@ -203,6 +246,10 @@ function media_oembed_media_internet_providers() {
   );
 }
 
+function media_oembed_preprocess_oembed(&$vars) {
+  $vars['classes_array'][] = 'media-embed-resize';
+}
+
 /**
  * Implements hook_media_operations().
  */
@@ -234,7 +281,7 @@ function media_oembed_cache_clear($fids) {
     $wrapper = file_stream_wrapper_get_instance_by_uri($file->uri);
     $url = $wrapper->interpolateUrl();
     $hashed_url = hash('sha256', $url);
-    foreach (array('oembed', 'oembed_thumbnail') as $type) {
+    foreach (array('oembed', 'oembed_thumbnail', 'oembed_bare', 'oembed_request') as $type) {
       $cid = $type . ':' . $hashed_url . ':';
       cache_clear_all($cid, 'cache_oembed', TRUE);
     }
@@ -260,7 +307,16 @@ class MediaInternetOEmbedHandler extends MediaInternetBaseHandler {
    */
   public function getFileObject() {
     $uri = 'oembed://'. drupal_encode_path($this->embedCode);
-    return file_uri_to_object($uri);
+    return file_uri_to_object($uri, TRUE);
+  }
+
+  /**
+   * If required, implementors can validate the embedCode.
+   */
+  public function validate() {
+    if (!$this->getOEmbed()) {
+      throw new MediaInternetValidationException(t('The URL provided does not point to a valid resource.'));
+    }
   }
 
   /**
@@ -272,5 +328,21 @@ class MediaInternetOEmbedHandler extends MediaInternetBaseHandler {
     if (!empty($embed->title)) {
       $file_obj->filename = $embed->title;
     }
+    // If a user enters a duplicate embed code, the object will be saved again.
+    // Set the timestamp to the current time, so that the media item shows up
+    // at the top of the media library, where they would expect to see it.
+    $file_obj->timestamp = REQUEST_TIME;
+  }
+
+  /**
+   * Returns an array representation of the oEmbed data, or NULL on failure.
+   *
+   * An example project that calls this method is Media Browser Plus
+   * (http://drupal.org/project/media_browser_plus). Other projects may do so
+   * in the future.
+   */
+  public function getOEmbed() {
+    $embed = oembedcore_oembed_data($this->embedCode);
+    return $embed ? (array) $embed : NULL;
   }
 }
diff --git a/oembedcore.module b/oembedcore.module
index d90b7ce..293e2e6 100644
--- a/oembedcore.module
+++ b/oembedcore.module
@@ -328,6 +328,7 @@ function oembedcore_oembed_fetch($provider, $url, $matches, $attributes = array(
   // Mock a render element for cache keys and expiration. This element will
   // not be rendered.
   $element = oembedcore_render_cache('oembed_request', $url, $attributes);
+  drupal_alter('oembed_request_element', $element);
   $cache_key = implode(':', $element['#cache']['keys']);
   $cache = cache_get($cache_key, $element['#cache']['bin']);
 
@@ -461,12 +462,12 @@ function oembedcore_pre_render_thumbnail($element) {
 
   $embed = $element['#embed'];
 
-  // Videos may have a thumbnail image.
-  if ($embed->type == 'video') {
+  // Check if the oEmbed response provides a thumbnail image.
+  if (!empty($embed->thumbnail_url)) {
     $url = $embed->thumbnail_url;
   }
-  // Photos must have a URL to an image.
-  else if ($embed->type == 'photo') {
+  // Otherwise, for photos use the original image.
+  elseif ($embed->type == 'photo') {
     $url = $embed->url;
   }
 
@@ -493,7 +494,9 @@ function oembedcore_pre_render_content($element) {
 
   $embed = $element['#embed'];
 
-  if (!empty($embed->title)) {
+  // Add a title, if one exists, unless the add_source_link option has been
+  // explicitly set to FALSE.
+  if (!empty($embed->title) && !(isset($element['#options']['add_source_link']) && $element['#options']['add_source_link'] === FALSE)) {
     $element['#title'] = array(
       '#markup' => $embed->title,
     );
